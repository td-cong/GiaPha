@{
    ViewBag.Title = "Phả Đồ";
    var allData = Model;
    var FamilyTreeColor = System.Configuration.ConfigurationManager.AppSettings["FamilyTreeColor"] ?? "#016e25";
}
@model IEnumerable<GiaPha.Models.ThanhVien>
<main aria-labelledby="title">
    <div class="container">
        <div class="row">
            <div class="col-md-12" align="center" style="margin-top:20px; margin-bottom:5px"><div class="tab-page-long active"><a href"">Phả đồ</a></div></div>
        </div>
        <div class="row">
            <script src="~/Scripts/orgchart.js?v=202311270854"></script>

            <div class="col-md-12">
                <div id="tree" style="height:calc(100vh - 160px)"></div>
                <div style="display: none;">
                    <div id="legend-content">
                        <div class="legend-content-wrapper">
                            <div class="legend-item">
                                <div class="legend-item-dot" style="background-color: red"></div> Trưởng họ
                            </div>
                            <div class="legend-item">
                                <div class="legend-item-dot" style="background-color: orange"></div> Trưởng chi
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>
<script>
    var phaDoInitialized = false;
    window.onload = function () {
        var nodes = [
            @foreach (var item in allData)
            {
                // Nếu là vợ/chông thì thêm tags partner là OrgChartJs nó hiểu node này là vợ/chồng
                var tags = item.VoChong > 0 ? $", tags: [\"partner\"]" : "";
                var pid = item.VoChong > 0 ? item.VoChong : item.PID;
                // Tìm vợ chồng của pid để đặt ppid, có ppid thì nó mới biết nằm giữa 2 cái
                var ppItem = Model.FirstOrDefault(x =>
                    x.ID != item.ID
                    && x.VoChong == item.PID
                );
                //var ppidString = ppItem != null ? $", ppid: {ppItem.ID}" : "";
                var ppidString = "";
                // Render item
                var node = $"{{ id: {item.ID}," +
                    $" pid: \"{pid}\"," +
                    $" \"HoTen\": \"{item.HoTen}\"," +
                    $" \"NamSinhNamMat\": \"{item.NamSinh} {(item.NamMat != null ? " - " + item.NamMat : "")}\"," +
                    $" \"img\": \"{(item.Avt?.Length > 0 ? item.Avt : "/Content/img/avt.jpg")}\"{tags}{ppidString}," +
                    $" \"IsTruongHo\": {(item.IsTruongHo == true ? "true" : "false")}," +
                    $" \"IsTruongChi\": {(item.IsTruongChi == true ? "true" : "false")}," +
                    $" }},\n";
                @Html.Raw(node);
                // Nếu dùng chung trường PID để xác định cả cha cả vợ chồng thì
            }
        ];

        OrgChart.SEARCH_PLACEHOLDER = "Tìm kiếm";
        var chart = new OrgChart(document.getElementById("tree"), {
            template: "diva",
            enableDragDrop: false,
            scaleInitial: OrgChart.match.width,
            //template: "giaPhaSo",
            nodeBinding: {
                field_0: "HoTen",
                field_1: "NamSinhNamMat",
                img_0: "img",
            },
            editForm: {
                generateElementsFromFields: false,
                elements: [
                    { type: 'textbox', label: 'Ảnh', binding: 'img', btn: 'Upload' },
                    { type: 'textbox', label: 'Họ tên', binding: 'Họ tên' },
                    { type: 'textbox', label: 'Năm sinh - Năm mất', binding: 'NamSinhNamMat' },
                    { type: 'checkbox', label: 'Là trưởng họ', binding: 'IsTruongHo' },
                    { type: 'checkbox', label: 'Là trưởng chi', binding: 'IsTruongChi' },
                ]
            }
        });

        chart.on('redraw', (sender) => {
            var allNodesRect = document.querySelectorAll('[data-n-id] rect');
            for (i = 0; i < allNodesRect.length; i++) {
                //console.log(node);
                var id = allNodesRect[i].parentElement.getAttribute('data-n-id');
                var node = chart.get(id);
                var fillColor = node.IsTruongHo == true
                    ? "red"
                    : node.IsTruongChi == true
                        ? "orange"
                        : "";
                allNodesRect[i].style.fill = fillColor;
            }

            if (!phaDoInitialized) {
                var legend = document.createElement("div");
                legend.style.position = 'absolute';
                legend.style.bottom = '10px';
                legend.style.right = '10px';
                legend.style.color = '#757575';
                legend.innerHTML = document.querySelector('#legend-content').innerHTML;
                chart.element.appendChild(legend);
                phaDoInitialized = true;
            }
        });

        chart.load(nodes);
    };
</script>

<style>
    #tree {
        width: 100%;
        height: 100%;
    }
    [data-n-id] rect {
        fill: var(--family-tree-color, #016e25);
    }
    [data-n-id] circle {
        stroke: var(--family-tree-color, #016e25);
    }
    #tree > svg {
        background-color: #d9aa7166;
        background-image: url(/Content/img/page-bg.png);
        background-size: 100% 100%;
    }
    [data-l-id] path {
        stroke: #000;
        stroke-width: 3px;
    }
    .boc-edit-form-header,
    .boc-img-button,
    .boc-button {
        background-color: var(--family-tree-color, #016e25) !important;
    }
    .boc-light .boc-input > label.focused, .boc-dark .boc-input > label.focused {
        color: green !important;
    }
    .legend-content-wrapper {
        padding: 3px 6px;
        background-color: #eeeeeeee;
        border-radius: 6px;
    }
    .legend-item {
        color: #000;
    }
    .legend-item-dot {
        width: 12px;
        height: 12px;
        background-color: var(--family-tree-color, #ccc);
        display: inline-block;
        border-radius: 50%;
    }
</style>